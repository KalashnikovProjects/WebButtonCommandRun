name: CI/CD Pipeline

on:
  release:
    types: [published]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go $${{ env.GO_VERSION }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-$${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-$${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test-race test-coverage lint

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: Determine repository visibility
        id: repo_visibility
        run: |
          if [[ "${{ github.event.repository.private }}" == "false" ]]; then
            echo "is_public=true" >> $GITHUB_OUTPUT
          else
            echo "is_public=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload SARIF to GitHub Security (public repo)
        if: steps.repo_visibility.outputs.is_public == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'gosec.sarif'

      - name: Save SARIF as artifact (private repo)
        if: steps.repo_visibility.outputs.is_public == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: gosec-results
          path: gosec.sarif
          retention-days: 7

  build-all:
    name: Build Multi-Architecture
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Build all architectures using Makefile
      run: make build-all

    - name: Create multi-arch packages
      run: |
        pairs=(
          "wbcr.exe:wbcr-windows.zip"
          "wbcr32.exe:wbcr-windows32.zip"
          "wbcr-linux:wbcr-linux.tar.gz"
          "wbcr-linux32:wbcr-linux32.tar.gz"
          "wbcr-linux-arm:wbcr-linux-arm.tar.gz"
          "wbcr-macos:wbcr-macos.tar.gz"
          "wbcr-macos-arm:wbcr-macos-arm.tar.gz"
        )
        
        for pair in "${pairs[@]}"; do
          binary="${pair%%:*}"
          name="${pair#*:}"
          echo $binary
          echo $name
          mkdir -p release-package-$name
          cp binaries/$binary release-package-$name/
        
          cp -r web release-package-$name/
          
          # Create archive, add pty folder in windows
          if [[ $binary == *.exe ]]; then
            cp -r pty release-package-$name/
            cd "release-package-$name" 
            zip -r "$name" .
            cd ..
            mv release-package-$name/$name $name
          else
            tar -czf $name -C release-package-$name .
          fi
        done

    - name: Upload multi-arch artifacts
      uses: actions/upload-artifact@v4
      with:
        name: builds
        path: |
          wbcr-windows.zip
          wbcr-windows32.zip
          wbcr-linux.tar.gz
          wbcr-linux-arm.tar.gz
          wbcr-linux32.tar.gz
          wbcr-macos.tar.gz
          wbcr-macos-arm.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-all]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          builds/wbcr-windows.zip
          builds/wbcr-windows32.zip
          builds/wbcr-linux.tar.gz
          builds/wbcr-linux-arm.tar.gz
          builds/wbcr-linux32.tar.gz
          builds/wbcr-macos.tar.gz
          builds/wbcr-macos-arm.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
