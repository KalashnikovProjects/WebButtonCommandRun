name: CI/CD Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go $${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-$${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-$${{ env.GO_VERSION }}

    - name: Install Linux dependencies
      run: sudo apt install -y pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test-race test-coverage lint

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: Determine repository visibility
        id: repo_visibility
        run: |
          if [[ "${{ github.event.repository.private }}" == "false" ]]; then
            echo "is_public=true" >> $GITHUB_OUTPUT
          else
            echo "is_public=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload SARIF to GitHub Security (public repo)
        if: steps.repo_visibility.outputs.is_public == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'gosec.sarif'

      - name: Save SARIF as artifact (private repo)
        if: steps.repo_visibility.outputs.is_public == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: gosec-results
          path: gosec.sarif
          retention-days: 7

  build-all:
    name: Build ${{ matrix.os }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    needs: [ test, security ]
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-22.04
            cc: "zig cc -target x86_64-linux-gnu"
            binary: wbcr-linux
            package: wbcr-linux.tar.gz
          - os: linux
            arch: 386
            runner: ubuntu-22.04
            cc: "zig cc -target x86-linux-gnu"
            binary: wbcr-linux32
            package: wbcr-linux32.tar.gz
          - os: linux
            arch: arm
            runner: ubuntu-22.04
            cc: "zig cc -target arm-linux-gnueabihf"
            binary: wbcr-linux-arm
            package: wbcr-linux-arm.tar.gz
          - os: linux
            arch: arm64
            runner: ubuntu-22.04
            cc: "zig cc -target aarch64-linux-gnu"
            binary: wbcr-linux-arm64
            package: wbcr-linux-arm64.tar.gz
          - os: windows
            arch: amd64
            runner: ubuntu-22.04
            cc: "zig cc -target x86_64-windows-gnu"
            binary: wbcr.exe
            package: wbcr-windows.zip
          - os: windows
            arch: 386
            runner: ubuntu-22.04
            cc: "zig cc -target x86-windows-gnu"
            binary: wbcr32.exe
            package: wbcr-windows32.zip
          - os: macos
            arch: amd64
            runner: macos-latest
            cc: ""
            binary: wbcr-macos
            package: wbcr-macos.zip
          - os: macos
            arch: arm64
            runner: macos-latest
            cc: ""
            binary: wbcr-macos-arm
            package: wbcr-macos-arm.zip
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Install Zig (Linux/Windows only)
        if: matrix.os != 'macos'
        uses: mlugg/setup-zig@v2
        with:
          version: "0.12.0"

      - name: Install Linux dependencies
        if: matrix.os == 'linux'
        run: sudo apt install -y pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev

      - name: Build binary
        run: |
          echo "Building ${{ matrix.binary }} for ${{ matrix.os }}/$${matrix.arch}"
          if [ "${{ matrix.os }}" != "macos" ]; then
            make CC_LINUX_AMD64="${{ matrix.cc }}" \
                 CC_LINUX_386="${{ matrix.cc }}" \
                 CC_LINUX_ARM="${{ matrix.cc }}" \
                 CC_LINUX_ARM64="${{ matrix.cc }}" \
                 CC_WINDOWS_AMD64="${{ matrix.cc }}" \
                 CC_WINDOWS_386="${{ matrix.cc }}" \
                 build-${{ matrix.binary }}
          else
            make build-${{ matrix.binary }}
          fi

      - name: Package artifact
        run: |
          mkdir -p release-package
          cp binaries/${{ matrix.binary }} release-package/
          cp -r web release-package/ || true
          if [[ "${{ matrix.binary }}" == *.exe ]]; then
            cp -r pty release-package/ || true
            cd release-package
            zip -r "${{ matrix.package }}" .
            cd ..
            mv release-package/${{ matrix.package }} ${{ matrix.package }}
          else
            tar -czf ${{ matrix.package }} -C release-package .
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}
          path: ${{ matrix.package }}

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: [build-all]
    permissions:
      contents: write
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          builds/wbcr-windows.zip
          builds/wbcr-windows32.zip
          builds/wbcr-linux.tar.gz
          builds/wbcr-linux32.tar.gz
          builds/wbcr-linux-arm.tar.gz
          builds/wbcr-linux-arm64.tar.gz
          builds-macos/wbcr-macos.zip
          builds-macos/wbcr-macos-arm.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
